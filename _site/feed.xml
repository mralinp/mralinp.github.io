<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-13T23:15:18+03:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">mralinp</title><subtitle>My awesome blog</subtitle><entry><title type="html">Variational AutoEncoders: An Introduction</title><link href="http://localhost:4000/blog/ai/machine-learning/deep-learning/2022/10/11/vae-intro.html" rel="alternate" type="text/html" title="Variational AutoEncoders: An Introduction" /><published>2022-10-11T08:24:05+03:30</published><updated>2022-10-11T08:24:05+03:30</updated><id>http://localhost:4000/blog/ai/machine-learning/deep-learning/2022/10/11/vae-intro</id><content type="html" xml:base="http://localhost:4000/blog/ai/machine-learning/deep-learning/2022/10/11/vae-intro.html"><![CDATA[<h1 id="1-intro">1. Intro</h1>
<p>In machine learning, a Variational AutoEncoder, is an artificial neural network architecture introduced by Diederik P. Kingma and Max Welling, belonging to the families of probabilistic graphical models and variational Bayesian methods. Variational autoencoders are often associated with the autoencoder model because of its architectural affinity, but with significant differences in the goal and mathematical formulation. Variational autoencoders allow statistical inference problems to be rewritten as statistical optimization problems. They are meant to map the input variable to a multivariate latent distribution. Although this type of model was initially designed for unsupervised learning, its effectiveness has been proven for semi-supervised learning and supervised learning (<a href="https://en.wikipedia.org/wiki/Variational_autoencoder">Wikipedia</a>).</p>

<div align="center">
    <img src="/assets/images/blog/vae-intro/authors.png" />
    <br />
    <span>Diederik P. Kingma and Max Welling</span>
</div>

<h1 id="2-the-idea">2. The Idea</h1>

<h1 id="3-architecture">3. Architecture</h1>

<h1 id="4-implementing-vae-using-tensorflow">4. Implementing VAE using Tensorflow</h1>

<h1 id="5">5.</h1>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://arxiv.org/abs/1906.02691"><em>Diederik P. Kingma, &amp; Max Welling (2019). An Introduction to Variational Autoencoders. Foundations and Trends® in Machine Learning, 12(4), 307–392.</em></a></li>
</ul>]]></content><author><name>Ali N. Parizi</name></author><category term="blog" /><category term="ai" /><category term="machine-learning" /><category term="deep-learning" /><summary type="html"><![CDATA[1. Intro In machine learning, a Variational AutoEncoder, is an artificial neural network architecture introduced by Diederik P. Kingma and Max Welling, belonging to the families of probabilistic graphical models and variational Bayesian methods. Variational autoencoders are often associated with the autoencoder model because of its architectural affinity, but with significant differences in the goal and mathematical formulation. Variational autoencoders allow statistical inference problems to be rewritten as statistical optimization problems. They are meant to map the input variable to a multivariate latent distribution. Although this type of model was initially designed for unsupervised learning, its effectiveness has been proven for semi-supervised learning and supervised learning (Wikipedia).]]></summary></entry><entry><title type="html">Getting started with game hacking: Making a CS:GO cheat</title><link href="http://localhost:4000/project/security/cracking/game-hacking/2022/10/09/csgo-cheat.html" rel="alternate" type="text/html" title="Getting started with game hacking: Making a CS:GO cheat" /><published>2022-10-09T12:21:13+03:30</published><updated>2022-10-09T12:21:13+03:30</updated><id>http://localhost:4000/project/security/cracking/game-hacking/2022/10/09/csgo-cheat</id><content type="html" xml:base="http://localhost:4000/project/security/cracking/game-hacking/2022/10/09/csgo-cheat.html"><![CDATA[<h1 id="intro">Intro</h1>
<p>This project is an example of game hacking, and it’s created to share the personal experience with other enthusiasts in this branch of software security.
This project is just for educational proposes and i’m not responsible for any other subversive applications.
As you know game hacking in online games is not allowed owing to annoying some other people. Normal players who just want to have fun with games, don’t want to face a demon hacker in their fun times, so game developers will respond if you do something to annoy other players. In other words cheating in online games will cause your account be banned (e.g VACation on steam platform).</p>]]></content><author><name>Ali N. Parizi</name></author><category term="project" /><category term="security" /><category term="cracking" /><category term="game-hacking" /><summary type="html"><![CDATA[Intro This project is an example of game hacking, and it’s created to share the personal experience with other enthusiasts in this branch of software security. This project is just for educational proposes and i’m not responsible for any other subversive applications. As you know game hacking in online games is not allowed owing to annoying some other people. Normal players who just want to have fun with games, don’t want to face a demon hacker in their fun times, so game developers will respond if you do something to annoy other players. In other words cheating in online games will cause your account be banned (e.g VACation on steam platform).]]></summary></entry><entry><title type="html">Design patterns: Building Extensible and Maintainable Object-Oriented Software</title><link href="http://localhost:4000/book/programming/design/design-pattern/2022/10/09/design-patterns.html" rel="alternate" type="text/html" title="Design patterns: Building Extensible and Maintainable Object-Oriented Software" /><published>2022-10-09T03:21:13+03:30</published><updated>2022-10-09T03:21:13+03:30</updated><id>http://localhost:4000/book/programming/design/design-pattern/2022/10/09/design-patterns</id><content type="html" xml:base="http://localhost:4000/book/programming/design/design-pattern/2022/10/09/design-patterns.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="programming" /><category term="design" /><category term="design-pattern" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Clean code: A handbook of agile software craftsmanship</title><link href="http://localhost:4000/book/programming/engineering/management/ethical-engineering/2022/10/09/clean-code.html" rel="alternate" type="text/html" title="Clean code: A handbook of agile software craftsmanship" /><published>2022-10-09T02:22:17+03:30</published><updated>2022-10-09T02:22:17+03:30</updated><id>http://localhost:4000/book/programming/engineering/management/ethical-engineering/2022/10/09/clean-code</id><content type="html" xml:base="http://localhost:4000/book/programming/engineering/management/ethical-engineering/2022/10/09/clean-code.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="programming" /><category term="engineering" /><category term="management" /><category term="ethical-engineering" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">When: The scientific secrets of perfect timing</title><link href="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/09/when.html" rel="alternate" type="text/html" title="When: The scientific secrets of perfect timing" /><published>2022-10-09T01:21:12+03:30</published><updated>2022-10-09T01:21:12+03:30</updated><id>http://localhost:4000/book/self-help/focus/study-lessens/2022/10/09/when</id><content type="html" xml:base="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/09/when.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="self-help" /><category term="focus" /><category term="study-lessens" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Deep work: Rules for focused success in a distracted world</title><link href="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/deep-work.html" rel="alternate" type="text/html" title="Deep work: Rules for focused success in a distracted world" /><published>2022-10-07T13:11:32+03:30</published><updated>2022-10-07T13:11:32+03:30</updated><id>http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/deep-work</id><content type="html" xml:base="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/deep-work.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="self-help" /><category term="focus" /><category term="study-lessens" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">The Subtle Art of Not Giving a Fuck</title><link href="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/the-art-of-dont-giving-a-fuck.html" rel="alternate" type="text/html" title="The Subtle Art of Not Giving a Fuck" /><published>2022-10-07T13:11:32+03:30</published><updated>2022-10-07T13:11:32+03:30</updated><id>http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/the-art-of-dont-giving-a-fuck</id><content type="html" xml:base="http://localhost:4000/book/self-help/focus/study-lessens/2022/10/07/the-art-of-dont-giving-a-fuck.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="self-help" /><category term="focus" /><category term="study-lessens" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">How to bypass the ‘Islamic Republic’ internet filtering?</title><link href="http://localhost:4000/project/network/security/vpn/2022/09/26/bypass-islamic-republic.html" rel="alternate" type="text/html" title="How to bypass the ‘Islamic Republic’ internet filtering?" /><published>2022-09-26T17:50:22+03:30</published><updated>2022-09-26T17:50:22+03:30</updated><id>http://localhost:4000/project/network/security/vpn/2022/09/26/bypass-islamic-republic</id><content type="html" xml:base="http://localhost:4000/project/network/security/vpn/2022/09/26/bypass-islamic-republic.html"><![CDATA[<h1 id="1-intro">1. Intro</h1>

<p>Some days, we hear some stories around the world that governments argue with people about some wrong laws, opaque decisions, bad economic environment, financial corruption, and many other reasons. To control the situation, one of their solutions is to disconnect people from the world by forcing ISPs and top-tier provider companies to shut down their internet connections. Some of these countries are China, North Korea, And the Islamic Republic Of Iran. The people living in these countries may do their jobs with the internet and in other words, their life has a direct relation with the connectivity to online services. In this situation, some necessary jobs that are in scathe are Developers, online shops, reporters, and many more. As a developer, I can’t live without the internet and my professional life is mixed with this technology. So I have to solve this problem by myself and in this case, I can’t accept the government’s politics. Let’s begin.</p>

<h1 id="2-what-is-the-solution">2. What is the solution</h1>
<p>How can we access the outside world? to access the outside world, we need to access a machine that is connected to the internet. We can access the world through that machine. In these situations, governments wouldn’t disconnect data centers from the internet because some bad things can happen to their servers and their companies will be at huge risk, especially in terms of security. So we can conclude that data centers that are inside the country are still connected to the internet and can access the outside world.</p>

<p>If we could successfully be connected to the world via a machine in the local data center, there still would be a problem for our freedom, <strong>cruel sanctions of the united states</strong>, which prevent these poor people to access services and contents which is accessible by other people in the world. To tackle this problem, we need a second machine which is in another country and is accessible through the internet. We have to send our packets using that second machine to be fully free. To do so, we need to make a <strong>virtual private network</strong>(VPN).</p>

<h2 id="21-virtual-private-network-vpn">2.1 Virtual Private Network (VPN)</h2>
<p>A virtual private network extends a private network across a public network and enables users to send and receive data across shared or public networks as if their computing devices were directly connected to the private network. The benefits of a VPN include increases in functionality, security, and management of the private network.</p>

<div align="center">
    <img src="/assets/images/blog/vpn-setup/vpn-schema.png" />
</div>
<p><br /></p>

<p>It provides access to resources that are inaccessible on the public network and is typically used for remote workers. Encryption is common, although not an inherent part of a VPN connection. A VPN is created by establishing a virtual point-to-point connection through the use of dedicated circuits or with tunneling protocols over existing networks. A VPN available from the public Internet can provide some of the benefits of a wide area network. From a user perspective, the resources available within the private network can be accessed remotely (<a href="https://en.wikipedia.org/wiki/Virtual_private_network">Wikipedia</a>).</p>

<h1 id="3-running-a-wireguard-vpn-server-on-ubuntu-2004-lts">3. Running a WireGuard VPN server on Ubuntu 20.04 (LTS)</h1>
<p>WireGuard is a communication protocol and free and open-source software that implements encrypted virtual private networks, and was designed with the goals of ease of use, high speed performance, and low attack surface. It aims for better performance and more power than IPsec and OpenVPN, two common tunneling protocols (<a href="https://en.wikipedia.org/wiki/WireGuard">Wikipedia</a>).</p>

<div align="center">
    <img width="50%" src="/assets/images/blog/vpn-setup/wg-logo.png" />
</div>

<p>For this tutorial, I choose Wireguard as the VPN protocol of this article. Installation and configuration of the Wireguard VPN server are quite simple and easy to understand for those who are not familiar with some concepts of networking in Linux in comparison with other protocols such as OpenVPN.</p>

<p>To get started, you need a Virtual Machine(VM) accessible through the internet via SSH in outside world. Let’s assume my VM IP address is <code class="language-plaintext highlighter-rouge">77.222.67.140</code>, I can connect to it using SSH as below:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ssh root@77.222.67.140
</code></pre></div></div>

<p>After running the command above, it asks you to type “yes” if you trust this host, just type “<code class="language-plaintext highlighter-rouge">yes</code>” and don’t ask why. Then you have to enter the VM password.
The first thing you do after connecting to the virtual machine is updating operating system packages to the latest available version using <code class="language-plaintext highlighter-rouge">Aptitude Package Manager</code>(apt):</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>apt update <span class="nt">--yes</span>
<span class="gp">$</span><span class="w"> </span>apt upgrade <span class="nt">--yes</span>
</code></pre></div></div>

<blockquote>
  <p>Note: It’s recommended that you reboot and reconnect to the VM after upgrading its packages.</p>
</blockquote>

<p>Now we have to install <code class="language-plaintext highlighter-rouge">wireguard</code> and <code class="language-plaintext highlighter-rouge">wireguard-tools</code> using apt:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>apt <span class="nb">install </span>wireguard <span class="nt">--yes</span>
<span class="gp">$</span><span class="w"> </span>apt <span class="nb">install </span>wireguard-tools <span class="nt">--yes</span>
</code></pre></div></div>

<p>This should install the Wireguard kernel module and the necessary tools for running our VPN server. If you would like to route your WireGuard Peer’s Internet traffic through the WireGuard Server then you will need to configure IP forwarding. To configure forwarding, open the <code class="language-plaintext highlighter-rouge">/etc/sysctl.conf</code> file using vim or your preferred editor:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>vim /etc/sysctl.conf 
</code></pre></div></div>

<p>Then you have to look for a line containing <code class="language-plaintext highlighter-rouge">net.ipv4.ip_forward=1</code> and uncomment that line (remove leading <code class="language-plaintext highlighter-rouge">#</code>) Or, you can just add this text at the end of <code class="language-plaintext highlighter-rouge">sysctl.conf</code> file. If you are using IPv6 with WireGuard, uncomment/add line <code class="language-plaintext highlighter-rouge">net.ipv6.conf.all.forwarding=1</code>. If you are using both IPv4 and IPv6, ensure that you include both lines. Save and close the file when you are finished (if you were using vim press <code class="language-plaintext highlighter-rouge">ESC</code> then type <code class="language-plaintext highlighter-rouge">wq</code> and press <code class="language-plaintext highlighter-rouge">enter</code>). To read the file and load the new values for your current terminal session, run:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>sysctl <span class="nt">-p</span>
</code></pre></div></div>
<p>If you did it right, you have to see an output as below:</p>
<pre><code class="language-output">net.ipv6.conf.all.forwarding = 1
net.ipv4.ip_forward = 1
</code></pre>

<p>Now your WireGuard Server will be able to forward incoming traffic from the virtual VPN ethernet device to others on the server, and from there to the public Internet. Using this configuration will allow you to route all web traffic from your WireGuard Peer via your server’s IP address, and <strong>your client’s public IP address will be effectively hidden</strong>.</p>

<p>However, before traffic can be routed via your server correctly, you will need to configure some firewall rules. These rules will ensure that traffic to and from your WireGuard Server and Peers flows properly.</p>

<h2 id="31-wireguard-ui">3.1 Wireguard UI</h2>
<p><a href="https://github.com/ngoduykhanh/wireguard-ui"><strong>Wireguard UI</strong></a> is a web-based config generator for wireguard server. If you’ve seen the DigitalOcean tutorial for running WireGurad server on ubuntu 20.04 which i pasted some parts of their tutorial here(Or other popular tutorials), they use the command line to generate configurations for clients which is called <strong>adding peers</strong> for wireguard server. Using command line interface and using wireguard-tool is quite hard to manage clients if you are making a network for your co-workers, family or friends. Wireguard-ui is a web-based interface for generating and managing client profiles and it’s written with go-lang which means that if you use its binary files which are available on their <a href="https://github.com/ngoduykhanh/wireguard-ui/releases"><strong>releases page</strong></a>, You don’t have to worry about running the application and it should work without any problems. To use wireguard-ui, you have to download the binary files first:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>wget https://github.com/ngoduykhanh/wireguard-ui/releases/download/v0.3.7/wireguard-ui-v0.3.7-linux-amd64.tar.gz
</code></pre></div></div>

<p>Then unzip the downloaded file:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">tar</span> <span class="nt">-xvf</span> wireguard-ui-v0.3.7-linux-amd64.tar.gz
</code></pre></div></div>

<p>Before running wireguard-ui, you have to open port 5000 on your VM which is the default port of wireguard-ui:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ufw allow 5000 # Open 5000 port
$ ufw disable # stop the firewall
$ ufw enable  # start the firewall
</code></pre></div></div>

<p>Now, run wireguard-ui using:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>./wireguard-ui
</code></pre></div></div>
<blockquote>
  <p>Note: If the above command failed, make sure that you gave the run access to that binary file using <code class="language-plaintext highlighter-rouge">$ chmod +x wireguard-ui</code></p>
</blockquote>

<p>After running wireguard-ui you can open your browser and type <code class="language-plaintext highlighter-rouge">YOUR_MACHINE_ADDRESS:5000</code> at the address bar and start using wireguard-ui. The default username and passwords for wireguard-ui are:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>username: admin
password: admin
</code></pre></div></div>
<p>Login to the panel and make as many client as you want, then download the configuration files or save the qr code for each client. After you finished your job, press <code class="language-plaintext highlighter-rouge">apply config</code> and go back to your vm, terminate the wireguard-ui by pressing <code class="language-plaintext highlighter-rouge">ctrl + c</code>.</p>

<div align="center">
    <img src="/assets/images/blog/vpn-setup/wireguard-ui.png" />
</div>

<p><br /></p>

<blockquote>
  <p>Note: Before making user clients, I recommend you to first change the server’s default port (then press <code class="language-plaintext highlighter-rouge">apply config</code>) and then begin creating profiles.</p>
</blockquote>

<p>Wireguard-ui should generate a configuration file and place it inside <code class="language-plaintext highlighter-rouge">/etc/wireguard/wg0.conf</code>. After terminating wireguard-ui, no further configurations are needed for adding clients and you can give the downloaded config files to your clients. To run the server there are two more steps to go with. One is configuring the server’s firewall and the other one is running wireguard server as a background service which is available in the next sections.</p>

<h2 id="32-configuring-the-wireguard-servers-firewall">3.2 Configuring the WireGuard Server’s Firewall</h2>

<p>In this section you will edit the WireGuard Server’s configuration to add firewall rules that will ensure traffic to and from the server and clients is routed correctly. As with the previous section, skip this step if you are only using your WireGuard VPN for a machine to machine connection to access resources that are restricted to your VPN.</p>

<p>To allow WireGuard VPN traffic through the Server’s firewall, you’ll need to enable masquerading, which is an iptables concept that provides on-the-fly dynamic network address translation (NAT) to correctly route client connections.</p>

<p>First find the public network interface of your WireGuard Server using the ip route sub-command:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ip route list default
</code></pre></div></div>

<p>The public interface is the string found within this command’s output that follows the word “dev”. For example, this result shows the interface named eth0, which is highlighted below:</p>

<pre><code class="language-output">default via 77.222.67.140 dev eth0 proto static
</code></pre>
<p>Note your device’s name since you will add it to the iptables rules in the next step.
To add firewall rules to your WireGuard Server, open the /etc/wireguard/wg0.conf file with vim or your preferred editor again.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>vim /etc/wireguard/wg0.conf
</code></pre></div></div>
<p>At the bottom of the file after the <code class="language-plaintext highlighter-rouge">SaveConfig = true</code> line, paste the following lines:</p>

<pre><code class="language-txt">PostUp = ufw route allow in on wg0 out on eth0
PostUp = iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
PostUp = ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
PreDown = ufw route delete allow in on wg0 out on eth0
PreDown = iptables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
PreDown = ip6tables -t nat -D POSTROUTING -o eth0 -j MASQUERADE
</code></pre>

<p>The PostUp lines will run when the WireGuard Server starts the virtual VPN tunnel. In the example here, it will add three ufw and iptables rules:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ufw route allow in on wg0 out on eth0</code> - This rule will allow forwarding IPv4 and IPv6 traffic that comes in on the wg0 VPN interface to the eth0 network interface on the server. It works in conjunction with the net.ipv4.ip_forward and net.ipv6.conf.all.forwarding sysctl values that you configured in the previous section.</li>
  <li><code class="language-plaintext highlighter-rouge">iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</code> - This rule configures masquerading, and rewrites IPv4 traffic that comes in on the wg0 VPN interface to make it appear like it originates directly from the WireGuard Server’s public IPv4 address.</li>
  <li><code class="language-plaintext highlighter-rouge">ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE</code> - This rule configures masquerading, and rewrites IPv6 traffic that comes in on the wg0 VPN interface to make it appear like it originates directly from the WireGuard Server’s public IPv6 address.</li>
</ul>

<blockquote>
  <p>Note: You can run these command just after running the server without adding Post and Pre configs.</p>
</blockquote>

<p>The PreDown rules run when the WireGuard Server stops the virtual VPN tunnel. These rules are the inverse of the PostUp rules, and function to undo the forwarding and masquerading rules for the VPN interface when the VPN is stopped.</p>

<p>In both cases, edit the configuration to include or exclude the IPv4 and IPv6 rules that are appropriate for your VPN. For example, if you are just using IPv4, then you can exclude the lines with the ip6tables commands.</p>

<p>Conversely, if you are only using IPv6, then edit the configuration to only include the ip6tables commands. The ufw lines should exist for any combination of IPv4 and IPv6 networks. Save and close the file when you are finished.</p>

<p>The last part of configuring the firewall on your WireGuard Server is to allow traffic to and from the WireGuard UDP port itself. If you did not change the port in the server’s <code class="language-plaintext highlighter-rouge">/etc/wireguard/wg0.conf</code> file, the port that you will open is 51820. If you chose a different port when editing the configuration be sure to substitute it in the following UFW command.</p>

<blockquote>
  <p>Note: In my experience data centers might close irregular ports such as the default Wireguard port <code class="language-plaintext highlighter-rouge">51820</code> and I suggest you to choose a popular service port for your VPN connection. I usually prefer using database ports or streaming services ports that are working with data and high network traffic on these ports seems less suspicious. (i.e. MongoDB default port 27017)</p>
</blockquote>

<p>In case you forgot to open the SSH port when following the prerequisite tutorial, add it here too:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ufw allow 51820/udp <span class="c"># The chosen VPN server port (you can change it to what ever you want)</span>
<span class="gp">$</span><span class="w"> </span>ufw allow OpenSSH   <span class="c"># To be able to connect the server using openSSH trough port 22</span>
</code></pre></div></div>

<blockquote>
  <p>Note: If you are using a different firewall or have customized your UFW configuration, you may need to add additional firewall rules. For example, if you decide to tunnel all of your network traffic over the VPN connection, you will need to ensure that port 53 traffic is allowed for DNS requests, and ports like 80 and 443 for HTTP and HTTPS traffic respectively. If there are other protocols that you are using over the VPN then you will need to add rules for them as well.</p>
</blockquote>

<p>After adding those rules, disable and re-enable UFW to restart it and load the changes from all of the files you’ve modified:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ufw disable
<span class="gp">$</span><span class="w"> </span>ufw <span class="nb">enable</span>
</code></pre></div></div>

<p>You can confirm the rules are in place by running the ufw status command. Run it, and you should receive output like the following:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>ufw status
</code></pre></div></div>
<pre><code class="language-output">Status: active

To                         Action      From
--                         ------      ----
51280/udp                  ALLOW       Anywhere                  
22/tcp                     ALLOW       Anywhere                  
51280/udp (v6)             ALLOW       Anywhere (v6)             
22/tcp (v6)                ALLOW       Anywhere (v6)
</code></pre>

<p>Your WireGuard Server is now configured to correctly handle the VPN’s traffic, including forwarding and masquerading for peers. With the firewall rules in place, you can start the WireGuard service itself to listen for peer connections.</p>

<h2 id="33-starting-the-wireguard-server">3.3 Starting the WireGuard Server</h2>
<p>WireGuard can be configured to run as a systemd service using its built-in wg-quick script. While you could manually use the wg command to create the tunnel every time you want to use the VPN, doing so is a manual process that becomes repetitive and error prone. Instead, you can use systemctl to manage the tunnel with the help of the wg-quick script.</p>

<p>Using a systemd service means that you can configure WireGuard to start up at boot so that you can connect to your VPN at any time as long as the server is running. To do this, enable the wg-quick service for the wg0 tunnel that you’ve defined by adding it to systemctl:</p>
<div class="language-terminal highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>systemctl <span class="nb">enable </span>wg-quick@wg0
</code></pre></div></div>
<p>Now start the service:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>systemctl start wg-quick@wg0
</code></pre></div></div>
<p>Double check that the WireGuard service is active with the following command. You should see active (running) in the output:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>systemctl status wg-quick@wg0.service
</code></pre></div></div>
<pre><code class="language-output">● wg-quick@wg0.service - WireGuard via wg-quick(8) for wg0
     Loaded: loaded (/lib/systemd/system/wg-quick@.service; enabled; vendor preset: enabled)
     Active: active (exited) since Wed 2021-08-25 15:24:14 UTC; 5s ago
       Docs: man:wg-quick(8)
             man:wg(8)
             https://www.wireguard.com/
             https://www.wireguard.com/quickstart/
             https://git.zx2c4.com/wireguard-tools/about/src/man/wg-quick.8
             https://git.zx2c4.com/wireguard-tools/about/src/man/wg.8
    Process: 3245 ExecStart=/usr/bin/wg-quick up wg0 (code=exited, status=0/SUCCESS)
   Main PID: 3245 (code=exited, status=0/SUCCESS)

Aug 25 15:24:14 wg0 wg-quick[3245]: [#] wg setconf wg0 /dev/fd/63
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] ip -4 address add 10.8.0.1/24 dev wg0
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] ip -6 address add fd0d:86fa:c3bc::1/64 dev wg0
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] ip link set mtu 1420 up dev wg0
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] ufw route allow in on wg0 out on eth0
Aug 25 15:24:14 wg0 wg-quick[3279]: Rule added
Aug 25 15:24:14 wg0 wg-quick[3279]: Rule added (v6)
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] iptables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
Aug 25 15:24:14 wg0 wg-quick[3245]: [#] ip6tables -t nat -I POSTROUTING -o eth0 -j MASQUERADE
Aug 25 15:24:14 wg0 systemd[1]: Finished WireGuard via wg-quick(8) for wg0.
</code></pre>

<p>The output shows the ip commands that are used to create the virtual wg0 device and assign it the IPv4 and IPv6 addresses that you added to the configuration file. You can use these rules to troubleshoot the tunnel, or with the wg command itself if you would like to try manually configuring the VPN interface.</p>

<p>With the server configured and running, the next step is to configure your client machine as a WireGuard Peer and connect to the WireGuard Server. Wireguard clients are available for almost every popular operating system such as Windows, Linux, Android, IOS, Mac OS, and many more. You can simply download the proper client and pass the client configuration file which you downloaded from wireguard-ui and connect to the server. (<a href="https://www.wireguard.com/install/"><strong>Download wireguard client</strong></a>)</p>

<blockquote>
  <p>Note: when ever you want to add more clients to the server, just run wireguard-ui and add your clients. After terminating the wireguard-ui, you have to restart the wireguard service using <code class="language-plaintext highlighter-rouge">systemctl restart wg-quick@wg0</code>. If you didn’t add Post and Pre Scripts to the wireguard config file like the previous section, you have to run iptables MASQUERADE rules again.</p>
</blockquote>

<h1 id="5-revers-proxy">5. Revers Proxy</h1>
<p>Congratulations, till now, you have configured a Virtual private network for your self but you might not be able to connect to the network directly in situations the government restricts users from connecting to the outside world as regards your outer VPN server is out there. To make your clients escape from the local intranet, you need a second machine inside a local data-centers which is connected to the public internet. That machine would be your middle server or the bridge to connect to the VPN server that you have configured previously. One simple solution to use this middle server as a bridge is setting a proxy on that middle server which redirects our requests to the target VPN server. In computer networking, a proxy server is a server application that acts as an intermediary between a client requesting a resource and the server providing that resource(<a href="https://en.wikipedia.org/wiki/Proxy_server">Wikipedia</a>).</p>

<h2 id="51-nginx-reverse-proxy">5.1 Nginx Reverse Proxy</h2>
<p>Nginx is a popular web-server application that is used to deploy various web applications and it has so many capabilities. One of the configurations that you can set for Nginx is to redirect incoming requests to a specific address by setting proxy routes. As we know that WireGuard traffic is a stream of data and its UDP. So, we have to set a stream proxy route for our purpose.</p>
<div align="center">
    <img width="60%" src="/assets/images/blog/vpn-setup/nginx-logo.png" />
</div>
<p><br /></p>

<p>This time, let’s connect to our middle server using ssh and after updating its packages, install Nginx on that machine.</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>apt <span class="nb">install </span>nginx <span class="nt">--yes</span>
</code></pre></div></div>

<p>After that, open Nginx configuration file from <code class="language-plaintext highlighter-rouge">/etc/nginx/nginx.conf</code> using vim or your preferred editor:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>vim /etc/nginx/nginx.conf
</code></pre></div></div>

<p>Then add a stream section at the end of that file and write your proxy config there:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>stream {
    server {
        listen 51820 udp;
        proxy_pass 77.222.67.140:51820;
    }
}
</code></pre></div></div>

<p>Save and exit when you are done. Restart nginx:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>service nginx restart
</code></pre></div></div>

<blockquote>
  <p>Note: In the config above, I opened 51820 port on my middle server and redirected incoming requests through this port to the target VPN server which we have wireguard installed. The first port number on the config <code class="language-plaintext highlighter-rouge">51820</code> is the port that I want to open on my middle server and the other one is the port I chose for my VPN server. You have to change these numbers if you chose something else.</p>
</blockquote>

<div align="center">
    <img src="/assets/images/blog/vpn-setup/wg-client.png" />
</div>
<p><br /></p>

<p>Now your clients should be able to connect to the VPN server through the middle server by changing the <code class="language-plaintext highlighter-rouge">Endpoint</code> on their configuration.</p>

<pre><code class="language-txt">[Interface]
PrivateKey = [CLIENT_PRIVATE_KEY]
Address = 10.252.1.1/32
DNS = 1.1.1.1

[Peer]
PublicKey = [PUBLIC_KEY]
PresharedKey = [PRE_SHARED_KEY]
AllowedIPs = 0.0.0.0/0
Endpoint = 77.222.67.140:51820 --&gt; change this address to  YOUR_MIDDLE_SERVER_IP:51820
PersistentKeepalive = 15
</code></pre>

<p>After editing the config file on the client’s machines:</p>

<pre><code class="language-txt">[Interface]
PrivateKey = [CLIENT_PRIVATE_KEY]
Address = 10.252.1.1/32
DNS = 1.1.1.1

[Peer]
PublicKey = [PUBLIC_KEY]
PresharedKey = [PRE_SHARED_KEY]
AllowedIPs = 0.0.0.0/0
Endpoint = 192.168.0.1:51820
PersistentKeepalive = 15
</code></pre>

<h2 id="52-nginx-on-docker">5.2 Nginx on docker</h2>
<p>As the Nginx docker image is available on the docker hub, you can use the Nginx container instead of installing Nginx on a separate VM. You can run your proxy server on the cloud which is cheaper cost beneficial than renting a virtual machine. Also, some proxy managers are available on docker-hub with a web-based interface such as the popular <a href="https://nginxproxymanager.com/guide/#project-goal"><strong>nginx-proxy-manager</strong></a>.</p>
<div align="center">
    <img width="50%" src="/assets/images/blog/vpn-setup/docker-logo.png" />
</div>
<p><br /></p>

<h1 id="6-wireguard-over-tcp-optional">6. WireGuard Over TCP (Optional)</h1>
<p>Wireguard itself is working only on UDP because it aims to be as fast as possible but, some providers may block UDP packets using their firewalls. This will make us some problems and prevents WireGuard to work properly. To tackle this issue, we have to convert UDP packets into TCP packets and transfer them through the network after delivering the packets to the VPN server, revert the TCP packets into UDP and pass them to the WireGuard service. This goal can be reached using <a href="http://www1.cs.columbia.edu/~lennox/udptunnel/"><strong>udptunnel</strong></a>. (<a href=""><strong>udp2raw</strong></a> is another popular UDP to TCP converter)</p>

<blockquote>
  <p>Note: Udptunnel does not support IPv6.</p>
</blockquote>

<p>Udptunnel is a simple application written in c and It should be run on two endpoints. On one end, it listens to incoming UDP packets on a specific port and converts them to TCP packets, then it transfers the TCP packet to the destination address which is running a udptunnel server on the other endpoint. In our case, the first endpoint is our middle server which is the local server inside the local intranet. Obviously, the second endpoint is our machine inside the outer world.</p>

<div align="center">
    <img src="/assets/images/blog/vpn-setup/udp2raw.svg" />
</div>
<p><br /></p>

<p>Udptunnel can be run in two modes server mode and client mode. You have to run the first instance in client mode and the second one as the server. In server mode it listens for TCP packets and transfers them back into UDP and in client mode receives UDP packets and transfers them to TCP.</p>

<p>Let’s start with the server, the machine located in the open world. First, we have to download the source code of udptunnel:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>wget https://github.com/rfc1036/udptunnel/archive/refs/heads/master.zip
</code></pre></div></div>

<p>Then we have to build the source code using the build-essential <strong>make</strong> but before that, run the command below to be sure you have the required packages:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install </span>build-essential pkg-config zip unzip <span class="nt">-y</span>
</code></pre></div></div>

<p>Let’s unzip the downloaded source codes:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>unzip master.zip
</code></pre></div></div>

<p>And build the source files:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>udptunnle-master
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make <span class="nb">install</span> 
</code></pre></div></div>

<p>Now let’s pick a TCP port and open the port on the firewall (I chose port 8080):</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw allow 8080/tcp
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw disable
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw <span class="nb">enable</span>
</code></pre></div></div>

<p>Then run the udptunnel as server:</p>
<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span>udptunnel <span class="nt">--server</span> 0.0.0.0:8080 <span class="nt">--verbose</span> 127.0.0.1:51820
</code></pre></div></div>
<p>It listens to the incoming TCP packets from everywhere converts the into UDP and passes them through port 51820 on the localhost which is the WireGuard server port.</p>

<p>Now jump into the middle server and, download and build the udptunnel source codes:</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>apt <span class="nb">install </span>build-essential pkg-config zip unzip <span class="nt">--yes</span>
<span class="gp">$</span><span class="w"> </span>wget https://github.com/rfc1036/udptunnel/archive/refs/heads/master.zip
<span class="gp">$</span><span class="w"> </span>unzip master.zip
<span class="gp">$</span><span class="w"> </span><span class="nb">cd </span>udptunnle-master
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>make <span class="nb">install</span> 
</code></pre></div></div>

<p>Pick a udp port, (I chose 8080 again!)</p>

<div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw allow 8080
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw disable
<span class="gp">$</span><span class="w"> </span><span class="nb">sudo </span>ufw <span class="nb">enable</span>
</code></pre></div></div>

<p>And run the udptunnel client on the middle server:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ udptunnel  0.0.0.0:8080 77.222.67.140:8080
</code></pre></div></div>

<blockquote>
  <p>Note: In the code above, <code class="language-plaintext highlighter-rouge">77.222.67.140</code> was the outer machine’s address.</p>
</blockquote>

<p>That’s it, go change the endpoint address to the new UDP port on the middle server:</p>

<pre><code class="language-txt">[Interface]
PrivateKey = [CLIENT_PRIVATE_KEY]
Address = 10.252.1.1/32
DNS = 1.1.1.1

[Peer]
PublicKey = [PUBLIC_KEY]
PresharedKey = [PRE_SHARED_KEY]
AllowedIPs = 0.0.0.0/0
Endpoint = 192.168.0.1:51820 --&gt; change this address to  YOUR_MIDDLE_SERVER_IP:8080
PersistentKeepalive = 15
</code></pre>

<p>After editing the config file on the client’s machines:</p>

<pre><code class="language-txt">[Interface]
PrivateKey = [CLIENT_PRIVATE_KEY]
Address = 10.252.1.1/32
DNS = 1.1.1.1

[Peer]
PublicKey = [PUBLIC_KEY]
PresharedKey = [PRE_SHARED_KEY]
AllowedIPs = 0.0.0.0/0
Endpoint = 192.168.0.1:8080
PersistentKeepalive = 15
</code></pre>

<p>That’s it.</p>

<blockquote>
  <p>Note: udptunnel is not a background server which means you don’t have to exit the ssh sessions (on middle and outer servers) while running this application. You can build a systemctl daemon, use <a href="https://linuxhint.com/linux-screen-command-tutorial/">screen</a> or <a href="https://en.wikipedia.org/wiki/Tmux">tmux</a> for running this application to prevent crashing of udptunnel after closing the session.</p>
</blockquote>

<p>And remember using WireGuard over TCP will affect your connection speed/bandwidth but some networks block or reduce the bandwidth for UDP connections and we have no other choices but running wire guard over TCP. Here is my experience using WireGuard over TCP:</p>

<p align="center">
    <img src="/assets/images/blog/vpn-setup/speed-test-udp-no-filter.png" />
    <br />
    <span>Bandwidth while using UDP and it's not restricted by government's firewall</span>
</p>

<p align="center">
    <img src="/assets/images/blog/vpn-setup/speed-test-udp.png" />
    <br />
    <span>Bandwidth while using UDP and it's restricted by government's firewall</span>

</p>

<p align="center">
    <img src="/assets/images/blog/vpn-setup/speed-test-tcp.png" />
    <br />
    <span>Bandwidth while using WireGuard over TCP</span>

</p>

<h1 id="7-final-words">7. Final words</h1>
<p>Some of you might have trouble using my solution for making your private network because of port choosing filtered port numbers. If things were not working change the chosen port numbers and try again. In some cases, government firewalls might block UDP packets and you need to do the solution on <a href="#6-wireguard-over-tcp-(optional)">part 6</a>.</p>

<p>The reverse proxy could be done using some simple firewall (iptables) rules but I chose Nginx to not be confused with iptables complexities and concepts.</p>

<p>WireGuard VPN server is the newest and best VPN protocol in the world till now, it is secure, fast, and easy to configure, and that’s why I chose this protocol to go within this article, but in extreme cases, it can be detected and your servers could be blocked.</p>

<p>To tackle this, keep the number of your clients as low as possible to prevent high network traffic from going through these servers. Also, you can use other VPN protocols using this abstract solution and find the one which works for you (such as <a href="https://shadowsocks.org/"><strong>Shadowsocks</strong></a>, <a href="https://getoutline.org/"><strong>Google Outline</strong></a>, <a href="https://openvpn.net/"><strong>OpenVPN</strong></a>, <a href="https://www.softether.org/"><strong>Softether</strong></a>, <a href="https://www.v2ray.com/"><strong>V2ray</strong></a>, etc.). If you have problems with this article reading the article’s references and a little search on DuckDuckGo (Or google) might help you to find the solution. I hope you find this article useful.</p>

<p>for a better world,<br />
Regards</p>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-wireguard-on-ubuntu-20-04">How to set up wireguard on ubuntu 20.04 (LTS)</a></li>
  <li><a href="https://github.com/ngoduykhanh/wireguard-ui">Wireguard-ui</a></li>
  <li><a href="https://ericiniguez.com/p/wireguard-vpn-and-nginx-reverse-proxy/">Wireguard vpn and nginx reverse proxy</a></li>
  <li><a href="https://nginxproxymanager.com/guide/#project-goal">Nginx proxy manager</a></li>
  <li><a href="https://www.oilandfish.com/posts/wireguard-udptunnel.html">WireGuard + udptunnel</a></li>
</ul>]]></content><author><name>Ali N. Parizi</name></author><category term="project" /><category term="network" /><category term="security" /><category term="vpn" /><summary type="html"><![CDATA[1. Intro]]></summary></entry><entry><title type="html">Smart Card: An Introduction to smart card development</title><link href="http://localhost:4000/blog/hardware/iot/device/crypto-graphic/smart-card/2022/09/24/smart-card-intro.html" rel="alternate" type="text/html" title="Smart Card: An Introduction to smart card development" /><published>2022-09-24T12:21:13+03:30</published><updated>2022-09-24T12:21:13+03:30</updated><id>http://localhost:4000/blog/hardware/iot/device/crypto-graphic/smart-card/2022/09/24/smart-card-intro</id><content type="html" xml:base="http://localhost:4000/blog/hardware/iot/device/crypto-graphic/smart-card/2022/09/24/smart-card-intro.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="blog" /><category term="hardware" /><category term="iot" /><category term="device" /><category term="crypto-graphic" /><category term="smart-card" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Computer vision: Algorithms and applications</title><link href="http://localhost:4000/book/programming/engineering/management/ethical/2022/09/24/computer-visoin.html" rel="alternate" type="text/html" title="Computer vision: Algorithms and applications" /><published>2022-09-24T12:21:13+03:30</published><updated>2022-09-24T12:21:13+03:30</updated><id>http://localhost:4000/book/programming/engineering/management/ethical/2022/09/24/computer-visoin</id><content type="html" xml:base="http://localhost:4000/book/programming/engineering/management/ethical/2022/09/24/computer-visoin.html"><![CDATA[]]></content><author><name>Ali N. Parizi</name></author><category term="book" /><category term="programming" /><category term="engineering" /><category term="management" /><category term="ethical" /><summary type="html"><![CDATA[]]></summary></entry></feed>